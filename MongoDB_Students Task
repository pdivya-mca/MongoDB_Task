import pymongo
from pymongo import MongoClient
import json
client=MongoClient()


#create new database 
new_db=client.student
print("\n Create a new dataase")
print(" --------------------\n")
print(new_db)
print()


#create collection
coll_name=new_db.student_collection
print("\n Create New Collection")
print(" ---------------------\n")
print(coll_name)
print()


#open json file
data = [json.loads(line)
        for line in open('E:\Assignment\students.json', 'r', encoding='utf-8')]
print(data)


#inserting json file into collection
'''coll_name.insert_many(data)

print("records inserted")
print()'''


# 1) Find the studentâ€™s name who scored maximum scores in all (exam, quiz and homework)?
print()
print("Find students name who scored maximum score in all exam,quiz and homework")
print("---------------------------------------------------\n")

data=coll_name.aggregate([
    {"$unwind":"$scores"},
    {"$group":{"_id":"$_id","name":{"$first":"$name"},"Total":{"$sum":"$scores.score"}}},
    {"$sort":{"Total":-1}},
    {"$limit":1}
    ])

for i in data:
        print(i)
        print()


# 2. Find students who scored below average in the exam and pass mark is 40%? ***

print()
print("Scores greater than 40 and less than 60")
print("--------------------------------------- \n")
result=coll_name.find({"scores.0.score":{'$gt':40,'$lt':60}})
for i in result:
        print(i)
        print()


#3. Find students who scored below pass mark and assigned them as fail, and above pass mark as pass in all the categories.
print()
print("Students marks pass/fail")
print("------------------------\n")

# update fail mark
fail_marks=coll_name.update_many({'$and':[{"scores.0.score":{'$lt':40}},{"scores.1.score":{'$lt':40}},{"scores.2.score":{'$lt':40}}]},{'$set':{"Result":"Fail"}})
print("Updated Successfully -- Result as Fail\n")

#update pass mark
pass_marks=coll_name.update_many({'$and':[{"scores.0.score":{'$gte':40}},{"scores.1.score":{'$gte':40}},{"scores.2.score":{'$gte':40}}]},{'$set':{"Result":"Pass"}})
print("Updated Successfully -- Result as Pass\n")


# 4. Find the total and average of the exam, quiz and homework and store them in a separate collection.

print("Total and average of all exams , quiz and homework ")
print("--------------------------------------------------\n")

#create new collection as average

new_db.create_collection('average')
avg_result=coll_name.aggregate([{'$unwind':{'path':"$scores"}},{'$group':{'_id':"$scores.type",'Totalsum':{'$sum':"$scores.score"},'Avgscore':{'$avg':"$scores.score"}}}])
tot_avg=new_db.average
for i in avg_result:
        print(i)
        tot_avg.insert_one(i)



# 5. Create a new collection which consists of students who scored below average and above 40% in all the categories. 
print("Student scored below average and above 40%")
print("------------------------------------------ \n")
def student(fail_result):
        stud_percent=fail_result.aggregate([{'$unwind':'$scores'},
                          {'$group':{"_id":"$_id","name":{"$first":"$name"},"max_score":{'$sum':"$scores.score"}}},
                          {'$addFields':{"percentage":{'$divide':["$max_score",3]}}},
                           {'$addFields':{"status":{"$cond":{'if' :{"$gte":["$percentage",40]},'then':"Pass",'else':"Fail"}}}}])
        return stud_percent


student_percent=student(coll_name)

#creating new collection as below_avg

new_db.create_collection('below_avg')
average=new_db.below_avg
for i in student_percent:
        if i['percentage']>=40 and i['percentage']<60:
                print(i)
                average.insert_one(i)



# 6. Create a new collection which consists of students who scored below the fail mark in all the categories. 
print()
print("Students who scored below fail marks")
print("------------------------------------ \n")

student_percent=student(coll_name)

#creating new collection as student_failed

new_db.create_collection('student_failed')
fail=new_db.student_failed
for i in student_percent:
        if i['status']=='Fail':
                print(i)
                fail.insert_one(i)


# 7. Create a new collection which consists of students who scored above pass mark in all the categories. 
print()
print("Students who scored above pass mark")
print("----------------------------------- \n")

student_percent=student(coll_name)

#creating new collection as student_passed

new_db.create_collection('student_passed')
fail=new_db.student_passed
for i in student_percent:
        if i['percentage']>=40:
                print(i)
                fail.insert_one(i)
